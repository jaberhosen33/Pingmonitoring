@model List<WebApplication2.Models.Outlet>

@{
    ViewData["Title"] = "Ping Monitor";
    var searchTerm = Context.Request.Query["searchTerm"];
}

<h2>Ping Monitor</h2>


<div class="row mb-5">
    <!-- Column 1: Search Form -->
    <div class="col-md-4">
        <form id="searchForm" asp-action="Index" method="get" class="input-group">
            <input type="text" id="searchInput" name="searchTerm" class="form-control" placeholder="Search by Outlet Name or Code..." value="@Context.Request.Query["searchTerm"]" autocomplete="off" />
            <button class="btn btn-outline-secondary" type="submit">Search</button>
        </form>
        <div id="loadingSpinner" class="text-center mt-3 col-md-6" style="display: none;">
            @* <div class="spinner-border text-primary" role="status"> *@
            @*     <span class="visually-hidden">Loading...</span> *@
            @* </div> *@
            <p>Checking connections... .</p>
        </div>
    </div>

    <!-- Column 2: Check Connections Button -->
    <div class="col-md-4">
        <form method="post" asp-action="CheckConnections" id="checkConnectionsForm">
            <button type="submit" class="btn btn-primary w-50">Check All Connections</button>
        </form>
    </div>

    <!-- Column 3: Pie Chart -->
    <div class="col-md-4 text-center">
        <canvas id="pieChart" width="200" height="200"></canvas>

        <div class="legend mt-3 d-flex justify-content-center flex-wrap gap-3">
            <div class="legend-item d-flex align-items-center gap-2">
                <div class="color-box" style="background-color: seagreen; width: 16px; height: 16px;"></div> LINK UP 
                <span class="fw-bold fs-5">
                    @{
                        @ViewData["Uplink"].ToString()
                        ;
                    }
                </span>
            </div>
            <div class="legend-item d-flex align-items-center gap-2">
                <div class="color-box" style="background-color: yellow; width: 16px; height: 16px;"></div> HIGH Latency
                <span class="fw-bold fs-5">
                    @{
                        @ViewData["HighPing"].ToString()
                        ;
                    }
                </span>
            </div>
            <div class="legend-item d-flex align-items-center gap-2">
                <div class="color-box" style="background-color: crimson; width: 16px; height: 16px;"></div> DOWN
                <span class="fw-bold fs-5">
                    @{
                        @ViewData["TotalDown"].ToString()
                        ;
                    }
                </span>
            </div>
        </div>
    </div>
</div>


<!-- Search Form -->

<!-- Loading Spinner -->

<!-- Filter Buttons -->
<div class="mb-2">
    <a asp-action="Index" class="btn btn-secondary">All</a>
    @* <a asp-action="Index" asp-route-filter="good" class="btn btn-success">Linked Up  </a> *@
    @* <a asp-action="Index" asp-route-filter="highping" class="btn btn-warning">High Ping</a> *@
    <button type="button" class="btn btn-success position-relative me-3"
            onclick="location.href='@Url.Action("Index", new { filter = "good" })'">
        Linked Up
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
            @{
                @ViewData["Uplink"].ToString()
                ;
            }
            <span class="visually-hidden">unread messages</span>
        </span>
    </button>
    <button type="button" class="btn btn-warning position-relative me-3"
            onclick="location.href='@Url.Action("Index", new { filter = "highping" })'">
        High Ping
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger font-weight-bold">
            @{
                @ViewData["HighPing"].ToString()
                ;
            }
            <span class="visually-hidden">unread messages</span>
        </span>
    </button>

    <button type="button" class="btn btn-danger position-relative"
            onclick="location.href='@Url.Action("Index", new { filter = "lost" })'">
        Disconnected
        <span class="position-absolute text-black-50 top-0 start-100 translate-middle badge rounded-pill bg-warning">
            @{
                @ViewData["TotalDown"].ToString();
            }
            <span class="visually-hidden">unread messages</span>
        </span>
    </button>
   
</div>
@* <div id="chartContainer" style="height: 370px; width: 100%;"></div> *@
<!-- Data Table -->
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Outlet Name</th>
            <th>Outlet Code</th>
            <th>IP Address</th>
            <th>ISP</th>
            <th>Phone</th>
            <th>Status </th>
            <th>Last Checked</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
               
                <td>@item.OutletName</td>
                <td>@item.OutletCode</td>
                <td>
                    <span id="ip-@item.Id">@item.IpAddress</span>
                    <i class="fas fa-copy text-success" style="cursor: pointer; margin-left: 5px;" onclick="copyToClipboard('ip-@item.Id')">copy</i>
                </td>
                @* <td>@item.IpAddress</td> *@
                <td>@item.ISPName</td>
                <td>@item.ISPPhone</td>
               
                <td>
                    @if (item.LastPingStatus == "Connection Lost")
                    {
                        <span class="text-danger">@item.LastPingStatus</span>
                        
                    }
                    else if (item.LastPingStatus == "High Ping")
                    {
                        <span class="text-warning">@item.LastPingStatus</span>
                    }
                    else
                    {
                        <span class="text-success">@item.LastPingStatus</span>
                    }
                </td>
                <td>@(item.LastPingTime?.ToString("g") ?? "Never")</td>
            </tr>
        }
    </tbody>
</table>

<!-- Scripts -->
@* @section Scripts { *@
@*     <script> *@
@*         document.getElementById("checkConnectionsForm").addEventListener("submit", function () { *@
@*             document.getElementById("loadingSpinner").style.display = "block"; *@
@*         }); *@

@*                function copyToClipboard(elementId) { *@
@*             var text = document.getElementById(elementId).innerText; *@
@*             navigator.clipboard.writeText(text).then(function () { *@
@*                 alert("Copied: " + text); *@
@*             }, function (err) { *@
@*                 alert("Failed to copy!"); *@
@*             }); *@
@*         } *@
@*     </script> *@
@* } *@

@section Scripts {
    <script>
        // Auto check and reload every 5 minutes (300000 ms)
        setInterval(() => {
            checkConnectionsAndReload();
        }, 10000); // 5 minutes

        async function checkConnectionsAndReload() {
            try {
                // Show loading spinner
                document.getElementById("loadingSpinner").style.display = "block";

                // Send POST request to CheckConnections
                const response = await fetch('@Url.Action("CheckConnections", "Home")', {
                    method: 'POST'
                });

                // Once done, reload the page
                location.reload();
            } catch (err) {
                console.error("Ping check failed", err);
            }
        }

        // Manual check shows spinner too
        document.getElementById("checkConnectionsForm").addEventListener("submit", function () {
            document.getElementById("loadingSpinner").style.display = "block";
        });

        function copyToClipboard(elementId) { 
             var text = document.getElementById(elementId).innerText; 
            navigator.clipboard.writeText(text).then(function () { 
                 alert("Copied: " + text); 
            }, function (err) { 
                 alert("Failed to copy!"); 
             }); 
         }
        
    </script>
    <script>
        const canvas = document.getElementById('pieChart');
        const ctx = canvas.getContext('2d');

        // Data and labels
        const data = [@{
            @ViewData["Uplink"].ToString()
            ;
        }, @{
            @ViewData["TotalDown"].ToString()
            ;
        }, @{
            @ViewData["HighPing"].ToString()
            ;
        }];
        const labels = ['Segment A', 'Segment B', 'Segment C'];
        const colors = ['seagreen', 'red', '#ffcd56'];
        const total = data.reduce((a, b) => a + b, 0);
        let startAngle = 0;

        data.forEach((value, index) => {
          const sliceAngle = (value / total) * 2 * Math.PI;

          // Draw segment
          ctx.beginPath();
          ctx.moveTo(100, 100);
          ctx.arc(100, 100, 100, startAngle, startAngle + sliceAngle);
          ctx.closePath();
          ctx.fillStyle = colors[index];
          ctx.fill();

          // Draw percentage text
          const midAngle = startAngle + sliceAngle / 2;
          const labelX = 100 + Math.cos(midAngle) * 60;
          const labelY = 100 + Math.sin(midAngle) * 60;
          const percent = Math.round((value / total) * 100);
          ctx.fillStyle = '#fff';
          ctx.font = 'bold 20px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(`${percent}%`, labelX, labelY);

          startAngle += sliceAngle;
        });
    </script>
    <script>
        const input = document.getElementById('searchInput');
        const form = document.getElementById('searchForm');
        let timeout = null;

        input.addEventListener('keyup', function () {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                form.submit();
            }, 1000); // Delay to avoid excessive requests
        });
    </script>
}
